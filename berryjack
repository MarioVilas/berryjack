#!/bin/bash
# coding: utf-8

SCRIPT_DIR=$(cd $(dirname $0);pwd)
source "$SCRIPT_DIR/common.sh"

function get_profile_image()
{
  src="$1"
  dest="$2"
  temp="$dest.$(now)"
  url=$(grep -oE 'https://pbs.twimg.com/profile_images/[0-9]{10}/[0-9a-z]{10,}.(jpe?|pn)g' "$src" | sort | uniq | head -n 1)
  if [ -n "$url" ]; then
    wget -O "$temp" -nv "$url"
    save_with_backup "$temp" "$dest"
  fi
}

function get_profile_banner()
{
  src="$1"
  dest="$2"
  temp="$dest.$(now)"
  url=$(grep -oE 'https://pbs.twimg.com/profile_banners/[0-9]{10}/[0-9]{10}/web' "$src" | sort | uniq | head -n 1)
  if [ -n "$url" ]; then
    wget -O "$temp" -nv "$url"
    save_with_backup "$temp" "$dest"
  fi
}

function get_profile_text()
{
  src="$1"
  dest="$2"
  temp="$dest.$(now)"
  name=$(awk '/ProfileHeaderCard-name/,/\/h1/{ print $0; }' "$src" | tr -d '\n' | strip_html_tag)
  desc=$(awk '/ProfileHeaderCard-bio/,/<div/{ print $0; }' "$src" | tr -d '\n' | strip_html_tag)
  echo "Name: $name"
  echo "Desc: $desc"
  (
    echo "$name"
    echo "$desc"
    grep 'ProfileHeaderCard-locationText' "$src" | strip_html_tag
    grep 'ProfileHeaderCard-urlText'      "$src" | sed 's/.*title="\([^"]*\).*/\1/g'
    grep 'ProfileHeaderCard-joinDateText' "$src" | sed 's/.*title="\([^"]*\).*/\1/g' | sed 's/\(.*\) - \(.*\)/\2\1/g'
  ) > "$temp"
  save_with_backup "$temp" "$dest"
}

function get_profile()
{
  id="$1"
  dir="$2"
  src="/tmp/twitter_profile.$$.html"
  wget -O "$src" -q "https://twitter.com/$id"
  get_profile_text   "$src" "$dir/profile.txt"
  get_profile_image  "$src" "$dir/profile.jpg"
  get_profile_banner "$src" "$dir/banner.jpg"
  rm "$src"
}

# Login to twitter
function login()
{
  username=$1
  password=$2
  # echo "Login to twitter.com ... " 1>&2
  # echo "User: $username" 1>&2
  token_cookie=/tmp/twitter_tokens.$$.txt
  session_cookie=/tmp/twitter_session.$$.txt
  token=$(wget -q --keep-session-cookies --save-cookies $token_cookie -O - https://twitter.com | grep authenticity_token | grep -Po '(?<=value=")[^"]+' | head -n 1)
  wget -q -O - --keep-session-cookies --load-cookies $token_cookie --save-cookies $session_cookie \
    --post-data "session[username_or_email]=$username&session[password]=$password&scribe_log=&remember_me=0&redirect_after_login=%2F&authenticity_token=$token" \
    https://twitter.com/sessions > /dev/null
  if [ -f "$session_cookie" ]; then
    echo $session_cookie
  fi
  [ -f "$token_cookie" ] && rm $token_cookie 2>/dev/null
}

function exist()
{
  dir=$1
  url=$2
  if [ -z "$url" ]; then
    return 1
  fi
  if [ -d "$dir" ]; then
    fname=$(basename "$url")
    if [ -f "$dir/$fname" ]; then
      return 1
    else
      echo $url
    fi
  else
    echo $url
  fi
  return 0
}

# Get posted media
function get_media_url()
{
  id=$1
  orig=$2
  cookie_opt=
  if [ "$3" != "" ]; then
    cookie_opt="--keep-session-cookies --load-cookies $3"
  fi
  dir=$4
  force=$5
  tmp=/tmp/$$.media
  param=
  cxt_id_prev=
  while :; do
    skip=0
    url="https://twitter.com/i/profiles/show/$id/media_timeline$param"
    wget $cookie_opt -O - -q "$url" | escape | decode > $tmp
    # video
    for line in $(grep 'middot' $tmp | sed -e 's/.*href="//g' -e 's/".*$//g')
    do
      item=($(echo "$line" | tr / ' '))
      stat=${item[2]}
      vcurl="https://twitter.com/i/videos/$stat"
      video=$(wget $cooke_opt -q -O - $vcurl | escape | decode | grep -Eo 'https://video[^&]*')
      exist "$dir" "$video"
      # if [ $? -ne 0 ]; then
      #   skip=1
      # fi
    done
    # image
    for image in $( grep -Eo 'https://pbs\.twimg\.com/media/[a-zA-Z0-9_\-]+\.(jpg|png)' $tmp | sort | uniq | \
      (if [ $orig -eq 0 ]; then
        cat
      else
        sed 's/$/:orig/g'
      fi
      ) )
    do
      exist "$dir" "$image"
      if [ $? -ne 0 ]; then
        skip=1
      fi
    done
    if [ $force -ne 1 -a $skip -eq 1 ]; then
      break;
    fi
    cxt_id=$(grep -Eo 'data-tweet-id="[0-9]+' $tmp | sed 's/^.*="//g' | sort | head -n 1)
    [ -n "$cxt_id" ] || break
    if [ "$cxt_id" == "$cxt_id_prev" ]; then break; fi
    cxt_id_prev=$cxt_id
    max_id=$(expr $cxt_id - 1)
    param="?last_note_ts=$cxt_id&max_position=$max_id"
    echo "" >&2
  done
  rm $tmp
}

function print_usage()
{
  cat <<EOF
$(basename $0) - The simple twitter media downloader

Usage:
  $0 [options] twitter_name[, ...]

Options:
  -l             List up only, No download.
  -d dir         Set directory to save downloaded files.
  -u             Create directory named twitter name each by each.
  -o             Get original size media.
  -f             Force download.
  -U user/email  Twitter user name or E-mail for login.
  -P password    Password for login.

Example:

  $0 -uo -d ~/twitter -U hoge -P fuga account1 account2 account3

* You can get more information and latest version at;
  berryjack project page : https://github.com/dyama/berryjack
EOF
}

# Initialize varable
odir=.
list_up_only=0
make_user_dir=0
get_orig=0
force=0
cookie_file=

# Get option strings
while getopts d:luofU:P: opt
do
  case $opt in
    d) odir=$OPTARG ;;
    l) list_up_only=1 ;;
    u) make_user_dir=1 ;;
    o) get_orig=1 ;;
    f) force=1 ;;
    U) username=$OPTARG ;;
    P) password=$OPTARG ;;
  esac
done
shift $(expr $OPTIND - 1)

# Check number of args and print usage
[ $# -eq 0 ] && print_usage && exit 0

if [ -n "$username" -a -n "$password" ]; then
  cookie_file=$(login "$username" "$password")
  if [ -f "$cookie_file" ]; then
    cookie_opt="--keep-session-cookies --load-cookies $cookie_file"
  else
    echo "Login failed. Please check your specified username/email or password." 1>&2
    exit 1
  fi
else
  echo "Try to download media without login." 1>&2
fi

pids=

# Download
for id in $@; do

  id=$(basename $id | sed 's/^@//g')
  echo "[bj] Target: $id" 1>&2

  if [ $list_up_only -eq 0 ]; then
    userdir=
    mkdir -p "$odir" 2>/dev/null
    if [ $make_user_dir -eq 1 ]; then
      userdir="$odir/$id"
      mkdir -p "$userdir" 2>/dev/null
      get_profile "$id" "$userdir"
    else
      userdir="$odir"
    fi
    for media_url in $(get_media_url $id $get_orig "$cookie_file" $userdir $force)
    do
      wget $cookie_opt -nc -nv -P "$userdir" "$media_url"
    done
  else
    get_media_url $id $get_orig "$cookie_file" "" $force
  fi

done

[ -f "$cookie_file" ] && rm $cookie_file 2>/dev/null

